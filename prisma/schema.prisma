// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum PassCategory {
  SWIM
  GYM
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  age           Int?
  password      String?
  role          Role      @default(USER)
  image         String?

  accounts      Account[]
  passes        Pass[]
  subscriptions ProgrammeSubscription[]
  programme     Programme[] // for trainers
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model PassType {
  id             String       @id @default(uuid())
  category       PassCategory // SWIM/GYM
  minAge         Int
  maxAge         Int
  isPeak         Boolean?
  durationInDays Int
  price          Float
  pass           Pass[]

  @@map("pass_types")
}

model Pass {
  id         String   @id @default(uuid())
  startDate  DateTime @default(now())
  endDate    DateTime
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique
  passType   PassType @relation(fields: [passTypeId], references: [id], onDelete: Cascade)
  passTypeId String   @unique

  @@map("passes")
}

model Programme {
  id              String                  @id @default(uuid())
  name            String
  description     String
  dates           DateTime[]
  price           Float
  venue           String // short name
  location        String // exact location
  startTime       DateTime
  endTime         DateTime
  maxParticipants Int
  trainer         User                    @relation(fields: [trainerId], references: [id], onDelete: Restrict) // don't delete programme if trainer is deleted, find new trainers
  trainerId       String                  @unique
  subscriptions   ProgrammeSubscription[]

  @@map("programmes")
}

model ProgrammeSubscription {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  programme   Programme @relation(fields: [programmeId], references: [id], onDelete: Cascade)
  programmeId String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("programme_subscriptions")
}
